
R version 2.7.2 (2008-08-25)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###
> ### TESTCOBS.R
> ###
> 
> 
> if (!nzchar(Sys.getenv("SUPERCURVE_FULL_TEST"))) {
+     cat(">>>>                <<<<", "\n")
+     cat(">>>>  Test skipped  <<<<", "\n")
+     cat(">>>>                <<<<", "\n")
+     message(sprintf("To run all package tests, define %s environment variable",
+                     dQuote("SUPERCURVE_FULL_TEST")))
+     q("no")
+ }
> options(warn=1)
> library(SuperCurve)
Loading required package: MASS
Loading required package: cobs
Loading required package: SparseM
Package SparseM (0.78) loaded.  To cite, see citation("SparseM")
Loading required package: quantreg
Loading required package: splines
>
> extdata.dir <- system.file("extdata", package="SuperCurve")
> 
> ######################################
> # load the tumor data
> home <- file.path(extdata.dir, "rppaTumorData")
> 
> # first locate the list of assays
> # the name 'proteins' is required
> # must include a column named 'Antibody'
> proteins <- read.delim(file.path(home, "proteinAssay.tsv"), as.is=TRUE)
> dimnames(proteins)[[1]] <- as.character(proteins$Antibody)
> 
> for (i in seq_len(nrow(proteins))) {
+     temp <- RPPA(proteins$File[i], path=home)
+     assign(proteins$Antibody[i], temp, 1)
+ }
> remove(i, temp)
> 
> ######################################
> # work out the appropriate design layout
> design <- RPPADesign(ERK2,
+                      grouping="blockSample",
+                      center=TRUE,
+                      controls=list("neg con", "pos con"))
> 
> ######################################
> # must define the 'model' to use
> model <- "cobs"
> 
> ######################################
> # must define the 'measure' to use
> measure <- "Mean.Net"
> 
> ######################################
> # must define the 'method' to use
> method <- 'nlrq'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ###
> ### TESTRBLOCK
> ###
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to try to run it as a standalone test.
> ## Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ###############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ###############################################################################
> 
> ver <- packageDescription("SuperCurve", fields="Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.3.0 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, sep=""), "\n")
model = cobs; method = nlrq; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item,
+                         design,
+                         measure,
+                         method=method,
+                         model=model,
+                         ignoreNegative=FALSE,
+                         warnLevel=-1),
+                 TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm=TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim=0.1)
+     par(bg="white")
+     plot(temp,
+          xlim=c(-15, 15),
+          main=paste(itemName, measure, ver),
+          sub=paste('Mean square residuals =', round(meansq)))
+     if (FALSE) {
+         dev.copy(png,
+                  file.path(paste(itemName, measure, ver, "png", sep=".")),
+                  width=640,
+                  height=640)
+         dev.off()
+     }
+     .... [TRUNCATED] 
[1] "ERK2 Mean.Net 295246 121653"
[1] "GSK3 Mean.Net 390394 159987"
[1] "JNK Mean.Net 327466 100243"

> remove(i, itemName, item, meansq, tmeansq)
> 
> method <- 'nlrob'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ###
> ### TESTRBLOCK
> ###
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to try to run it as a standalone test.
> ## Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ###############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ###############################################################################
> 
> ver <- packageDescription("SuperCurve", fields="Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.3.0 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, sep=""), "\n")
model = cobs; method = nlrob; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item,
+                         design,
+                         measure,
+                         method=method,
+                         model=model,
+                         ignoreNegative=FALSE,
+                         warnLevel=-1),
+                 TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm=TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim=0.1)
+     par(bg="white")
+     plot(temp,
+          xlim=c(-15, 15),
+          main=paste(itemName, measure, ver),
+          sub=paste('Mean square residuals =', round(meansq)))
+     if (FALSE) {
+         dev.copy(png,
+                  file.path(paste(itemName, measure, ver, "png", sep=".")),
+                  width=640,
+                  height=640)
+         dev.off()
+     }
+     .... [TRUNCATED] 
Loading required package: robustbase
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
[1] "ERK2 Mean.Net 263983 124538"
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
[1] "GSK3 Mean.Net 315415 156073"
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
[1] "JNK Mean.Net 293567 104538"

> remove(i, itemName, item, meansq, tmeansq)
> 
> method <- "nls"
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ###
> ### TESTRBLOCK
> ###
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to try to run it as a standalone test.
> ## Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ###############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ###############################################################################
> 
> ver <- packageDescription("SuperCurve", fields="Version")

> cat(paste("\nTest of SuperCurve version", ver), "\n")

Test of SuperCurve version 1.3.0 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, sep=""), "\n")
model = cobs; method = nls; measure = Mean.Net 

> for (i in seq_len(nrow(proteins))) {
+     itemName <- proteins$Antibody[i]
+     item <- eval(as.name(itemName))
+     temp <- try(RPPAFit(item,
+                         design,
+                         measure,
+                         method=method,
+                         model=model,
+                         ignoreNegative=FALSE,
+                         warnLevel=-1),
+                 TRUE)
+     if (is(temp, "try-error")) {
+         print(paste(itemName, measure, ver, "FAILED"))
+         next
+     }
+     meansq <- mean(resid(temp)^2, na.rm=TRUE)
+     tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim=0.1)
+     par(bg="white")
+     plot(temp,
+          xlim=c(-15, 15),
+          main=paste(itemName, measure, ver),
+          sub=paste('Mean square residuals =', round(meansq)))
+     if (FALSE) {
+         dev.copy(png,
+                  file.path(paste(itemName, measure, ver, "png", sep=".")),
+                  width=640,
+                  height=640)
+         dev.off()
+     }
+     .... [TRUNCATED] 
[1] "ERK2 Mean.Net 257063 130929"
[1] "GSK3 Mean.Net 302740 165287"
[1] "JNK Mean.Net 283742 114890"

> remove(i, itemName, item, meansq, tmeansq)
> 
> ######################################
> ## print the concentrations from the last fit. These will
> ## automatically be compared with the saved output when we
> ## run 'R CMD check'
> round(temp@concentrations, digits=4)
  sample 1.1.1   sample 2.1.1   sample 3.1.2   sample 4.1.2   sample 5.1.3 
       -4.1558        -7.5654        -3.3272        -3.9931        -4.0151 
  sample 6.1.3   sample 7.1.4   sample 8.1.4   sample 9.1.5  sample 10.1.5 
       -7.2658        -4.0746        -7.0958        -4.9305        -9.3296 
 sample 11.1.6  sample 12.1.6  sample 13.1.7  sample 14.1.7  sample 15.1.8 
       -5.0071        -9.3296        -5.4334        -6.8814        -7.7995 
 sample 16.1.8  sample 17.1.9  sample 18.1.9 sample 19.1.10 sample 20.1.10 
       -4.3889        -3.7154        -4.4806        -2.0922        -7.6571 
sample 21.1.11 sample 22.1.11 sample 23.1.12 sample 24.1.12  sample 25.2.1 
       -4.4751        -5.8481        -1.1955        -6.2096        -2.9081 
 sample 26.2.1  sample 27.2.2  sample 28.2.2  sample 29.2.3  sample 30.2.3 
       -8.5764        -3.1972        -6.4220        -2.3741        -9.3296 
 sample 31.2.4  sample 32.2.4  sample 33.2.5  sample 34.2.5  sample 35.2.6 
       -4.0601        -6.0008        -3.2570        -5.1684        -3.3489 
 sample 36.2.6  sample 37.2.7  sample 38.2.7  sample 39.2.8  sample 40.2.8 
       -3.9003        -3.1350        -3.6320        -0.6190        -7.2023 
 sample 41.2.9  sample 42.2.9 sample 43.2.10 sample 44.2.10 sample 45.2.11 
       -3.1395        -3.4903        -0.9672        -4.5894        -2.7393 
sample 46.2.11 sample 47.2.12 sample 48.2.12  sample 49.3.1  sample 50.3.1 
       -7.8944        -0.6030        -1.9477        -3.0441        -4.0387 
 sample 51.3.2  sample 52.3.2  sample 53.3.3  sample 54.3.3  sample 55.3.4 
       -3.0601        -5.8312        -2.6640        -3.5302        -3.2355 
 sample 56.3.4  sample 57.3.5  sample 58.3.5  sample 59.3.6  sample 60.3.6 
       -5.7930        -2.4877        -3.9814        -3.2986        -4.4346 
 sample 61.3.7  sample 62.3.7  sample 63.3.8  sample 64.3.8  sample 65.3.9 
       -2.6083        -3.6840        -3.5162        -6.5316        -2.8743 
 sample 66.3.9 sample 67.3.10 sample 68.3.10 sample 69.3.11 sample 70.3.11 
       -6.3309        -6.4660        -6.6230        -2.7838        -4.3274 
sample 71.3.12 sample 72.3.12  sample 73.4.1  sample 74.4.1  sample 75.4.2 
       -4.5928        -7.3972        -3.8155        -6.4068        -7.9076 
 sample 76.4.2  sample 77.4.3  sample 78.4.3  sample 79.4.4  sample 80.4.4 
       -7.7738        -4.8000        -4.7127        -0.8740        -3.2226 
 sample 81.4.5  sample 82.4.5  sample 83.4.6  sample 84.4.6  sample 85.4.7 
       -4.3948        -7.4768        -3.3020        -4.6431        -6.2088 
 sample 86.4.7  sample 87.4.8  sample 88.4.8  sample 89.4.9  sample 90.4.9 
       -5.9608        -5.4505        -8.1808        -4.7984        -4.4786 
sample 91.4.10 sample 92.4.10 sample 93.4.11 sample 94.4.11 sample 95.4.12 
       -3.1585        -6.5965        -3.9766        -5.4874        -7.3085 
sample 96.4.12 
       -9.3296 
> 
> 
