
R version 2.7.0 (2008-04-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(SuperCurve)
Loading required package: MASS
Loading required package: cobs
Loading required package: SparseM
Package SparseM (0.77) loaded.  To cite, see citation("SparseM")
Loading required package: quantreg
Loading required package: splines
> 
> ## Get a valid RPPA object to get started
> path <- system.file("rppaTumorData", package="SuperCurve")
> jnk <- RPPA("JNK.txt", path=path)
> ## build the correct design
> dsn <- RPPADesign(jnk,
+                   grouping="blockSample",
+                   center=TRUE,
+                   controls=list("neg con", "pos con"))
> 
> try( RPPAFitParams() ) # missing required argument
Error in RPPAFitParams() : argument "measure" is missing, with no default
> 
> fp <- RPPAFitParams("Mean.Net")
> summary(fp)
Fitting parametsrs
Measure: Mean.Net 
Method: nls 
Model: logistic 
> 
> 
> fp <- RPPAFitParams("Mean.Net", model="bogus") # cannot catch this yet
> summary(fp)
Fitting parametsrs
Measure: Mean.Net 
Method: nls 
Model: bogus 
> try(fit <- RPPAFitFromParams(jnk, dsn, fp))    # but find the bad argument here
Error in get(model, envir = .rppaModels) : variable "bogus" was not found
Error in RPPAFitFromParams(jnk, dsn, fp) : 
  argument 'model' must be the name of a registed fit class
> 
> try( RPPAFitParams("Mean.Net", method="bogus") ) # bad argument
Error in match.arg(method) : 
  'arg' should be one of "nls", "nlrob", "nlrq"
> 
> try( fp <- RPPAFitParams("Mean.Net", method="nlrob",
+                          model="bogus") ) # cannot catch this yet
> summary(fp)
Fitting parametsrs
Measure: Mean.Net 
Method: nlrob 
Model: bogus 
> try(fit <- RPPAFitFromParams(jnk, dsn, fp))    # but find the bad argument here
Error in get(model, envir = .rppaModels) : variable "bogus" was not found
Error in RPPAFitFromParams(jnk, dsn, fp) : 
  argument 'model' must be the name of a registed fit class
> 
> 
> fp <- RPPAFitParams("Mean.Net", model="logistic", method="nlrob")
> summary(fp)
Fitting parametsrs
Measure: Mean.Net 
Method: nlrob 
Model: logistic 
> fit <- RPPAFitFromParams(jnk, dsn, fp)
Loading required package: robustbase
Warning messages:
1: In nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
2: In nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
3: In nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
4: In nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
5: In nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
> 
> fp <- RPPAFitParams("Mean.Net", model="logistic", method="nls")
> summary(fp)
Fitting parametsrs
Measure: Mean.Net 
Method: nls 
Model: logistic 
> fit <- RPPAFitFromParams(jnk, dsn, fp)
> 
> fp <- RPPAFitParams("Mean.Net", model="logistic", method="nlrq")
> summary(fp)
Fitting parametsrs
Measure: Mean.Net 
Method: nlrq 
Model: logistic 
> fit <- RPPAFitFromParams(jnk, dsn, fp)
Warning messages:
1: In lsfit(x, y, d^2, int = FALSE) : 'X' matrix was collinear
2: In lsfit(x, y, d^2, int = FALSE) : 'X' matrix was collinear
3: In lsfit(x, y, d^2, int = FALSE) : 'X' matrix was collinear
4: In lsfit(x, y, d^2, int = FALSE) : 'X' matrix was collinear
> 
