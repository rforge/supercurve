
R version 2.7.0 (2008-04-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(SuperCurve)
Loading required package: MASS
Loading required package: cobs
Loading required package: SparseM
Package SparseM (0.77) loaded.  To cite, see citation("SparseM")
Loading required package: quantreg
Loading required package: splines
> 
> ######################################
> # load the tumor data
> home <- system.file("rppaTripleData", package="SuperCurve")
> 
> # first locate the list of assays
> # the name 'proteins' is required
> # must include a column named 'Antibody'
> proteins <- read.table(file.path(home, 'proteinAssay.tsv'),
+                        header=TRUE, sep='\t', as.is=TRUE)
> dimnames(proteins)[[1]] <- as.character(proteins$Antibody)
> 
> for (i in 1:nrow(proteins)) {
+   temp <- RPPA(proteins$File[i], path=home)
+   assign(proteins$Antibody[i], temp, 1)
+ }
> rm(i, temp)
> 
> ######################################
> # work out the appropriate design layout
> design <- RPPADesign(ACTB)
> 
> ######################################
> # must define the 'model' to use
> model <- "loess"
> 
> ######################################
> # must define the 'measure' to use
> measure <- "Mean.Net"
> 
> ######################################
> # must define the 'method' to use
> method <- 'nlrq'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ## 
> ## testRblock
> ##
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to  try to run it as a standalone
> ## test. Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ############################################################################
> 
> ver <- packageDescription('SuperCurve', fields='Version')

> cat(paste("\nTest of SuperCurve version", ver, "\n"))

Test of SuperCurve version 0.9999 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, "\n", sep=""))
model = loess; method = nlrq; measure = Mean.Net

> for (i in 1:nrow(proteins)) {
+   itemName <- proteins$Antibody[i]
+   item <- eval(as.name(itemName))
+   temp <- try(RPPAFit(item, design, measure,
+                       method=method,
+                       model=model,
+                       ignoreNegative=FALSE,
+                       warnLevel=-1),
+               TRUE)
+   if(is(temp, 'try-error')) {
+     print(paste(itemName, measure, ver, 'FAILED'))
+     next
+   }
+   meansq <- mean(resid(temp)^2, na.rm=TRUE)
+   tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim = 0.1)
+   par(bg='white')
+   plot(temp, xlim=c(-15,15), main=paste(itemName, measure, ver),
+        sub=paste('Mean square residuals =', round(meansq)))
+   if (FALSE) {
+     dev.copy(png, file.path(paste(itemName, measure, ver, 'png', sep='.')),
+              width=640, height=640)
+     dev.off()
+   }
+   print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
[1] "ODC1 Mean.Net 170405 75570"
[1] "ACTB Mean.Net 472601 196031"
[1] "FAK Mean.Net 193798 86938"
[1] "ACTB-gray Mean.Net 566072 255936"

> rm(i, itemName, item, meansq, tmeansq)
> 
> method <- 'nlrob'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ## 
> ## testRblock
> ##
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to  try to run it as a standalone
> ## test. Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ############################################################################
> 
> ver <- packageDescription('SuperCurve', fields='Version')

> cat(paste("\nTest of SuperCurve version", ver, "\n"))

Test of SuperCurve version 0.9999 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, "\n", sep=""))
model = loess; method = nlrob; measure = Mean.Net

> for (i in 1:nrow(proteins)) {
+   itemName <- proteins$Antibody[i]
+   item <- eval(as.name(itemName))
+   temp <- try(RPPAFit(item, design, measure,
+                       method=method,
+                       model=model,
+                       ignoreNegative=FALSE,
+                       warnLevel=-1),
+               TRUE)
+   if(is(temp, 'try-error')) {
+     print(paste(itemName, measure, ver, 'FAILED'))
+     next
+   }
+   meansq <- mean(resid(temp)^2, na.rm=TRUE)
+   tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim = 0.1)
+   par(bg='white')
+   plot(temp, xlim=c(-15,15), main=paste(itemName, measure, ver),
+        sub=paste('Mean square residuals =', round(meansq)))
+   if (FALSE) {
+     dev.copy(png, file.path(paste(itemName, measure, ver, 'png', sep='.')),
+              width=640, height=640)
+     dev.off()
+   }
+   print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
Loading required package: robustbase
[1] "ODC1 Mean.Net 170405 75570"
[1] "ACTB Mean.Net 472601 196031"
[1] "FAK Mean.Net 193798 86938"
[1] "ACTB-gray Mean.Net 566072 255936"

> rm(i, itemName, item, meansq, tmeansq)
> 
> method <- "nls"
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ## 
> ## testRblock
> ##
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to  try to run it as a standalone
> ## test. Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ############################################################################
> 
> ver <- packageDescription('SuperCurve', fields='Version')

> cat(paste("\nTest of SuperCurve version", ver, "\n"))

Test of SuperCurve version 0.9999 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, "\n", sep=""))
model = loess; method = nls; measure = Mean.Net

> for (i in 1:nrow(proteins)) {
+   itemName <- proteins$Antibody[i]
+   item <- eval(as.name(itemName))
+   temp <- try(RPPAFit(item, design, measure,
+                       method=method,
+                       model=model,
+                       ignoreNegative=FALSE,
+                       warnLevel=-1),
+               TRUE)
+   if(is(temp, 'try-error')) {
+     print(paste(itemName, measure, ver, 'FAILED'))
+     next
+   }
+   meansq <- mean(resid(temp)^2, na.rm=TRUE)
+   tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim = 0.1)
+   par(bg='white')
+   plot(temp, xlim=c(-15,15), main=paste(itemName, measure, ver),
+        sub=paste('Mean square residuals =', round(meansq)))
+   if (FALSE) {
+     dev.copy(png, file.path(paste(itemName, measure, ver, 'png', sep='.')),
+              width=640, height=640)
+     dev.off()
+   }
+   print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
[1] "ODC1 Mean.Net 120068 58981"
[1] "ACTB Mean.Net 360753 180499"
[1] "FAK Mean.Net 155339 66832"
[1] "ACTB-gray Mean.Net 421580 234844"

> rm(i, itemName, item, meansq, tmeansq)
> 
> ######################################
> ## print the concentrations from the last fit. These will
> ## automatically be compared with the saved output when we
> ## run 'R CMD check'
> temp@concentrations
 Series.1.1.1  Series.1.1.2  Series.1.1.3  Series.1.1.4  Series.1.1.5 
  -0.86016633   -0.59064348   -0.73062243    1.92983400    1.95965443 
 Series.1.1.6  Series.1.2.1  Series.1.2.2  Series.1.2.3  Series.1.2.4 
   2.29920211   -0.07659443   -0.09850344    0.20270269    2.80924750 
 Series.1.2.5  Series.1.2.6  Series.1.3.1  Series.1.3.2  Series.1.3.3 
   3.21766431    3.22848424    1.94412883    2.23675683    1.98226014 
 Series.1.3.4  Series.1.3.5  Series.1.3.6  Series.1.4.1  Series.1.4.2 
   2.97770244    2.50307841    2.91138506    3.38282742    3.61379743 
 Series.1.4.3  Series.1.4.4  Series.1.4.5  Series.1.4.6  Series.1.5.1 
   3.54993174    3.59212431    3.64642086    4.05926212    3.15758112 
 Series.1.5.2  Series.1.5.3  Series.1.5.4  Series.1.5.5  Series.1.5.6 
   3.23327920    2.92231987    2.94952460    3.13474359    3.24233410 
 Series.1.6.1  Series.1.6.2  Series.1.6.3  Series.1.6.4  Series.1.6.5 
   3.61487485    3.91598630    3.68734997    3.38647301    3.55614306 
 Series.1.6.6  Series.1.7.1  Series.1.7.2  Series.1.7.3  Series.1.7.4 
   3.86247031    3.88195164    4.05910975    3.89107377    7.28201341 
 Series.1.7.5  Series.1.7.6  Series.1.8.1  Series.1.8.2  Series.1.8.3 
   6.68215941    6.86522188    4.76755028    5.19788548    4.72649783 
 Series.1.8.4  Series.1.8.5  Series.1.8.6  Series.1.9.1  Series.1.9.2 
   3.72378135    3.87645417    4.17463185    4.55353584    4.54261940 
 Series.1.9.3  Series.1.9.4  Series.1.9.5  Series.1.9.6 Series.1.10.1 
   4.56741115    6.85555587    7.32456250    7.59894191    4.14427909 
Series.1.10.2 Series.1.10.3 Series.1.10.4 Series.1.10.5 Series.1.10.6 
   4.61251809    4.49495459    4.34797266    3.97034384    4.57269878 
Series.1.11.1 Series.1.11.2 Series.1.11.3 Series.1.11.4 Series.1.11.5 
   2.95840049    3.17212021    2.93967592    3.05606602    2.74781544 
Series.1.11.6 Series.1.12.1 Series.1.12.2 Series.1.12.3 Series.1.12.4 
   3.11819438    1.70632779    1.75709520    1.71987369    0.99236063 
Series.1.12.5 Series.1.12.6  Series.2.1.1  Series.2.1.2  Series.2.1.3 
   0.50250180    1.14748610    1.90739200    1.67791630    2.01984548 
 Series.2.1.4  Series.2.1.5  Series.2.1.6  Series.2.2.1  Series.2.2.2 
  -1.07514188   -0.28284748   -1.18885420    2.13116788    1.94464018 
 Series.2.2.3  Series.2.2.4  Series.2.2.5  Series.2.2.6  Series.2.3.1 
   1.84130998    1.81005268    1.56979155    1.75602194    2.93967595 
 Series.2.3.2  Series.2.3.3  Series.2.3.4  Series.2.3.5  Series.2.3.6 
   2.76809840    2.71683186    1.38441478    1.42966996    1.27602515 
 Series.2.4.1  Series.2.4.2  Series.2.4.3  Series.2.4.4  Series.2.4.5 
   4.75616702    4.59766368    4.39861235    4.79276675    4.94742527 
 Series.2.4.6  Series.2.5.1  Series.2.5.2  Series.2.5.3  Series.2.5.4 
   5.15984140    4.73446167    4.72110216    4.42308669    4.68167142 
 Series.2.5.5  Series.2.5.6  Series.2.6.1  Series.2.6.2  Series.2.6.3 
   4.51048485    4.42792288    6.19301979    5.64079381    5.36732145 
 Series.2.6.4  Series.2.6.5  Series.2.6.6  Series.2.7.1  Series.2.7.2 
   5.16030188    5.04832621    4.88205303    6.48246336    6.47607494 
 Series.2.7.3  Series.2.7.4  Series.2.7.5  Series.2.7.6  Series.2.8.1 
   6.59348062    4.22918553    3.95088456    3.73438071    6.49953664 
 Series.2.8.2  Series.2.8.3  Series.2.8.4  Series.2.8.5  Series.2.8.6 
   6.34153619    6.04672123    4.21220731    4.00626334    3.92646092 
 Series.2.9.1  Series.2.9.2  Series.2.9.3  Series.2.9.4  Series.2.9.5 
   5.80433462    5.22898334    5.02937608    3.98485528    3.93053095 
 Series.2.9.6 Series.2.10.1 Series.2.10.2 Series.2.10.3 Series.2.10.4 
   3.90011794   -0.23825849   -0.30983251   -0.59006685   -0.06315018 
Series.2.10.5 Series.2.10.6 Series.2.11.1 Series.2.11.2 Series.2.11.3 
  -0.32719464   -0.41029208   -0.22944659   -0.46252804   -0.41736724 
Series.2.11.4 Series.2.11.5 Series.2.11.6 Series.2.12.1 Series.2.12.2 
  -0.86947617   -1.15221603   -1.37513361   -0.74541011   -1.21362623 
Series.2.12.3 Series.2.12.4 Series.2.12.5 Series.2.12.6  Series.3.1.1 
  -1.03121709   -3.20443289   -3.18807600   -2.78899717    0.03103165 
 Series.3.1.2  Series.3.1.3  Series.3.1.4  Series.3.1.5  Series.3.1.6 
   0.56499325    0.62387318    2.55249487    2.30757774    2.14245096 
 Series.3.2.1  Series.3.2.2  Series.3.2.3  Series.3.2.4  Series.3.2.5 
   3.43795623    3.30229513    3.17049892    4.05561369    4.02325311 
 Series.3.2.6  Series.3.3.1  Series.3.3.2  Series.3.3.3  Series.3.3.4 
   4.04069062    3.59338468    3.57999397    3.23312168    5.45418112 
 Series.3.3.5  Series.3.3.6  Series.3.4.1  Series.3.4.2  Series.3.4.3 
   5.15987616    5.47120140    5.58062766    5.13626486    4.95769323 
 Series.3.4.4  Series.3.4.5  Series.3.4.6  Series.3.5.1  Series.3.5.2 
   5.00533074    4.64098903    4.83035574    4.54223181    4.54336491 
 Series.3.5.3  Series.3.5.4  Series.3.5.5  Series.3.5.6  Series.3.6.1 
   4.38450735    4.18127013    4.38313492    4.47855857    5.50726012 
 Series.3.6.2  Series.3.6.3  Series.3.6.4  Series.3.6.5  Series.3.6.6 
   5.65488817    5.30211673    4.56882354    5.08393827    5.03911392 
 Series.3.7.1  Series.3.7.2  Series.3.7.3  Series.3.7.4  Series.3.7.5 
   5.27751002    4.65078629    4.75173788    7.81105582    7.63745740 
 Series.3.7.6  Series.3.8.1  Series.3.8.2  Series.3.8.3  Series.3.8.4 
   8.18268096    5.08429378    4.72160685    4.36838141    6.90000623 
 Series.3.8.5  Series.3.8.6  Series.3.9.1  Series.3.9.2  Series.3.9.3 
   7.03136884    7.56939114    4.03922441    4.24683028    3.95712489 
 Series.3.9.4  Series.3.9.5  Series.3.9.6 Series.3.10.1 Series.3.10.2 
   7.62081194    8.46894156    9.02276569    4.03829253    4.08836635 
Series.3.10.3 Series.3.10.4 Series.3.10.5 Series.3.10.6 Series.3.11.1 
   4.17327842    3.54586452    4.21319495    3.74480051    3.63945293 
Series.3.11.2 Series.3.11.3 Series.3.11.4 Series.3.11.5 Series.3.11.6 
   3.83337691    3.72536476    2.98091842    2.85191580    3.26905636 
Series.3.12.1 Series.3.12.2 Series.3.12.3 Series.3.12.4 Series.3.12.5 
   2.71773136    2.98060745    2.70295301    2.51051172    2.84692251 
Series.3.12.6  Series.4.1.1  Series.4.1.2  Series.4.1.3  Series.4.1.4 
   2.73462078    1.33239518    1.50119621    1.33197166    1.76086701 
 Series.4.1.5  Series.4.1.6  Series.4.2.1  Series.4.2.2  Series.4.2.3 
   0.97232131    1.48427470    3.45787879    3.39620835    3.38007578 
 Series.4.2.4  Series.4.2.5  Series.4.2.6  Series.4.3.1  Series.4.3.2 
   3.16902667    3.10074307    2.60540128    4.18855432    3.88642019 
 Series.4.3.3  Series.4.3.4  Series.4.3.5  Series.4.3.6  Series.4.4.1 
   3.19039151    3.41274482    3.25993009    2.76502811    7.22292360 
 Series.4.4.2  Series.4.4.3  Series.4.4.4  Series.4.4.5  Series.4.4.6 
   6.77948436    6.10747786    6.87470961    6.45178564    5.72401473 
 Series.4.5.1  Series.4.5.2  Series.4.5.3  Series.4.5.4  Series.4.5.5 
   5.15258595    5.02303190    4.70892792    5.59652980    5.11548564 
 Series.4.5.6  Series.4.6.1  Series.4.6.2  Series.4.6.3  Series.4.6.4 
   4.85100537    4.49372632    4.63568130    4.57581252    4.97498937 
 Series.4.6.5  Series.4.6.6  Series.4.7.1  Series.4.7.2  Series.4.7.3 
   4.76881442    4.64327514    7.38142886    7.53952265    7.11628090 
 Series.4.7.4  Series.4.7.5  Series.4.7.6  Series.4.8.1  Series.4.8.2 
   5.32787317    5.04093460    4.45223561    7.04042903    7.23654647 
 Series.4.8.3  Series.4.8.4  Series.4.8.5  Series.4.8.6  Series.4.9.1 
   6.99423445    5.76980485    5.52935074    5.14055684    7.35070117 
 Series.4.9.2  Series.4.9.3  Series.4.9.4  Series.4.9.5  Series.4.9.6 
   7.44975063    7.14556615    5.50594409    4.98924412    4.41544991 
Series.4.10.1 Series.4.10.2 Series.4.10.3 Series.4.10.4 Series.4.10.5 
  -1.58227542   -1.16674488   -1.33963140   -1.80553947   -1.78909779 
Series.4.10.6 Series.4.11.1 Series.4.11.2 Series.4.11.3 Series.4.11.4 
  -1.72964802   -1.92259280   -1.95516836   -1.65793218   -1.74978251 
Series.4.11.5 Series.4.11.6 Series.4.12.1 Series.4.12.2 Series.4.12.3 
  -2.11539590   -3.06666363   -4.28867266   -3.71009985   -4.23949649 
Series.4.12.4 Series.4.12.5 Series.4.12.6 
  -2.78245104   -3.53468087   -3.84919131 
> 
> ######################################
> ## This early design had each series repeated nine times,
> ## three times within a subgrid and again in three adjacent
> ## subgrids. Here we measure the variability of the
> ## replicates.
> d <- ACTB@data[seq(6, nrow(ACTB@data), by=6),]
> attach(d)
> foo <- paste("Series", Main.Row, Main.Col, Sub.Row, sep='.')
> detach()
> sum(foo==seriesNames(design))
[1] 288
> 
> avgs <- tapply(temp@concentrations, list(d$Sample), mean)
> spread <- tapply(temp@concentrations, list(d$Sample), sd)
> res <- data.frame(Mean=avgs, SD=spread, CV=spread/abs(avgs))
> res[order(res$SD),]
                         Mean        SD         CV
G26                 3.9860985 0.1538114 0.03858696
U251 10%            7.2504956 0.1902104 0.02623412
KM12L4              4.8456437 0.2662237 0.05494082
PASW 480 10%01      3.4531053 0.3067626 0.08883673
L3.6 10%            4.6901683 0.3183878 0.06788409
L3.6                3.4921662 0.3522073 0.10085641
SNB19               4.4652928 0.4409469 0.09874982
SNB19 10%           4.5663884 0.4513754 0.09884736
MDA468              2.2163198 0.4641963 0.20944466
G26 10%             5.1301549 0.4673224 0.09109323
PASW 480 10%01 10%  5.0676616 0.4861389 0.09592962
MDA231              2.6484725 0.4997246 0.18868410
SW 480 10%          3.1886451 0.5514070 0.17292830
U251                6.0558341 0.5838246 0.09640697
U87 EGFR 10%        3.5443804 0.5884178 0.16601430
KM12C               4.9813587 0.6154094 0.12354249
U87 10%             7.8049422 0.6709580 0.08596579
KM12L4 10%          5.4445122 0.7858756 0.14434271
BT474 10%           2.5033708 0.8812030 0.35200660
Buffer             -1.0342623 1.0071441 0.97378009
KM12C 10%           5.4110724 1.0302396 0.19039471
Blank              -2.4602814 1.0446029 0.42458677
MDA468 10%          2.8516769 1.1378369 0.39900624
U87 EGFR 0.5        3.0561383 1.1730427 0.38383167
BT474               0.7421258 1.2301169 1.65755835
MCF7                0.4454798 1.2552498 2.81774776
MDA231 10%          3.9119266 1.3214537 0.33780124
MCF7 10%            2.3930165 1.5053758 0.62907039
K562                2.7172711 1.5121669 0.55650203
U87                 6.0425914 1.6165869 0.26753206
> 
