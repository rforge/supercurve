
R version 2.7.0 (2008-04-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(SuperCurve)
Loading required package: MASS
Loading required package: cobs
Loading required package: SparseM
Package SparseM (0.77) loaded.  To cite, see citation("SparseM")
Loading required package: quantreg
Loading required package: splines
> 
> ######################################
> # load the tumor data
> home <- system.file("rppaTumorData", package="SuperCurve")
> 
> # first locate the list of assays
> # the name 'proteins' is required
> # must include a column named 'Antibody'
> proteins <- read.table(file.path(home, 'proteinAssay.tsv'),
+                        header=TRUE, sep='\t', as.is=TRUE)
> dimnames(proteins)[[1]] <- as.character(proteins$Antibody)
> 
> for (i in 1:nrow(proteins)) {
+   temp <- RPPA(proteins$File[i], path=home)
+   assign(proteins$Antibody[i], temp, 1)
+ }
> rm(i, temp)
> 
> ######################################
> # work out the appropriate design layout
> design <- RPPADesign(ERK2, grouping="blockSample",
+                      center=TRUE, controls=list("neg con", "pos con"))
> 
> ######################################
> # must define the 'model' to use
> model <- "cobs"
> 
> ######################################
> # must define the 'measure' to use
> measure <- "Mean.Net"
> 
> ######################################
> # must define the 'method' to use
> method <- 'nlrq'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ## 
> ## testRblock
> ##
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to  try to run it as a standalone
> ## test. Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ############################################################################
> 
> ver <- packageDescription('SuperCurve', fields='Version')

> cat(paste("\nTest of SuperCurve version", ver, "\n"))

Test of SuperCurve version 0.9999 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, "\n", sep=""))
model = cobs; method = nlrq; measure = Mean.Net

> for (i in 1:nrow(proteins)) {
+   itemName <- proteins$Antibody[i]
+   item <- eval(as.name(itemName))
+   temp <- try(RPPAFit(item, design, measure,
+                       method=method,
+                       model=model,
+                       ignoreNegative=FALSE,
+                       warnLevel=-1),
+               TRUE)
+   if(is(temp, 'try-error')) {
+     print(paste(itemName, measure, ver, 'FAILED'))
+     next
+   }
+   meansq <- mean(resid(temp)^2, na.rm=TRUE)
+   tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim = 0.1)
+   par(bg='white')
+   plot(temp, xlim=c(-15,15), main=paste(itemName, measure, ver),
+        sub=paste('Mean square residuals =', round(meansq)))
+   if (FALSE) {
+     dev.copy(png, file.path(paste(itemName, measure, ver, 'png', sep='.')),
+              width=640, height=640)
+     dev.off()
+   }
+   print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
[1] "ERK2 Mean.Net 422869 155179"
[1] "GSK3 Mean.Net 765991 230940"
[1] "JNK Mean.Net 493724 121665"

> rm(i, itemName, item, meansq, tmeansq)
> 
> method <- 'nlrob'
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ## 
> ## testRblock
> ##
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to  try to run it as a standalone
> ## test. Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ############################################################################
> 
> ver <- packageDescription('SuperCurve', fields='Version')

> cat(paste("\nTest of SuperCurve version", ver, "\n"))

Test of SuperCurve version 0.9999 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, "\n", sep=""))
model = cobs; method = nlrob; measure = Mean.Net

> for (i in 1:nrow(proteins)) {
+   itemName <- proteins$Antibody[i]
+   item <- eval(as.name(itemName))
+   temp <- try(RPPAFit(item, design, measure,
+                       method=method,
+                       model=model,
+                       ignoreNegative=FALSE,
+                       warnLevel=-1),
+               TRUE)
+   if(is(temp, 'try-error')) {
+     print(paste(itemName, measure, ver, 'FAILED'))
+     next
+   }
+   meansq <- mean(resid(temp)^2, na.rm=TRUE)
+   tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim = 0.1)
+   par(bg='white')
+   plot(temp, xlim=c(-15,15), main=paste(itemName, measure, ver),
+        sub=paste('Mean square residuals =', round(meansq)))
+   if (FALSE) {
+     dev.copy(png, file.path(paste(itemName, measure, ver, 'png', sep='.')),
+              width=640, height=640)
+     dev.off()
+   }
+   print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
Loading required package: robustbase
[1] "ERK2 Mean.Net 422869 155179"
[1] "GSK3 Mean.Net 765991 230940"
[1] "JNK Mean.Net 493724 121665"

> rm(i, itemName, item, meansq, tmeansq)
> 
> method <- "nls"
> source("testRblock", echo=TRUE, max.deparse.len=1024)

> ## 
> ## testRblock
> ##
> 
> ## NOTE: We cannot give this file a name ending in '.R', since that
> ## would force 'R CMD check' to  try to run it as a standalone
> ## test. Instead, we want to be able to reuse the code in a number of
> ## different test runs, loading it with 'source'.
> 
> 
> ############################################################################
> ## assumes you have already defined the following variables before using
> ## 'source' to run this code block:
> ##    proteins (a data frame containing at least one column named 'Antibody'
> ##    various RPPA objects, one for each antibody in the 'proteins' object
> ##    design (an RPPADesign object)
> ##    model (the statistical model to fit)
> ##    method (the method used for the first pass of the fit)
> ##    measure (the quantification measure to fit)
> ############################################################################
> 
> ver <- packageDescription('SuperCurve', fields='Version')

> cat(paste("\nTest of SuperCurve version", ver, "\n"))

Test of SuperCurve version 0.9999 

> cat(paste("model = ", model, "; method = ", method,
+             "; measure = ", measure, "\n", sep=""))
model = cobs; method = nls; measure = Mean.Net

> for (i in 1:nrow(proteins)) {
+   itemName <- proteins$Antibody[i]
+   item <- eval(as.name(itemName))
+   temp <- try(RPPAFit(item, design, measure,
+                       method=method,
+                       model=model,
+                       ignoreNegative=FALSE,
+                       warnLevel=-1),
+               TRUE)
+   if(is(temp, 'try-error')) {
+     print(paste(itemName, measure, ver, 'FAILED'))
+     next
+   }
+   meansq <- mean(resid(temp)^2, na.rm=TRUE)
+   tmeansq <- mean(resid(temp)^2, na.rm=TRUE, trim = 0.1)
+   par(bg='white')
+   plot(temp, xlim=c(-15,15), main=paste(itemName, measure, ver),
+        sub=paste('Mean square residuals =', round(meansq)))
+   if (FALSE) {
+     dev.copy(png, file.path(paste(itemName, measure, ver, 'png', sep='.')),
+              width=640, height=640)
+     dev.off()
+   }
+   print(paste(itemName, measure, round(meansq), round(tmeansq)))
+ }
[1] "ERK2 Mean.Net 257063 130929"
[1] "GSK3 Mean.Net 302740 165287"
[1] "JNK Mean.Net 283742 114890"

> rm(i, itemName, item, meansq, tmeansq)
> 
> ######################################
> ## print the concentrations from the last fit. These will
> ## automatically be compared with the saved output when we
> ## run 'R CMD check'
> temp@concentrations
  sample 1.1.1   sample 2.1.1   sample 3.1.2   sample 4.1.2   sample 5.1.3 
    -4.1558141     -7.5654498     -3.3271502     -3.9930502     -4.0151147 
  sample 6.1.3   sample 7.1.4   sample 8.1.4   sample 9.1.5  sample 10.1.5 
    -7.2658159     -4.0745648     -7.0958380     -4.9305022     -9.3295635 
 sample 11.1.6  sample 12.1.6  sample 13.1.7  sample 14.1.7  sample 15.1.8 
    -5.0071030     -9.3295635     -5.4334217     -6.8814278     -7.7995428 
 sample 16.1.8  sample 17.1.9  sample 18.1.9 sample 19.1.10 sample 20.1.10 
    -4.3888614     -3.7154400     -4.4806221     -2.0921887     -7.6570984 
sample 21.1.11 sample 22.1.11 sample 23.1.12 sample 24.1.12  sample 25.2.1 
    -4.4751185     -5.8481258     -1.1954725     -6.2095952     -2.9081484 
 sample 26.2.1  sample 27.2.2  sample 28.2.2  sample 29.2.3  sample 30.2.3 
    -8.5763974     -3.1971864     -6.4220288     -2.3741327     -9.3295635 
 sample 31.2.4  sample 32.2.4  sample 33.2.5  sample 34.2.5  sample 35.2.6 
    -4.0600867     -6.0008282     -3.2569996     -5.1683682     -3.3489079 
 sample 36.2.6  sample 37.2.7  sample 38.2.7  sample 39.2.8  sample 40.2.8 
    -3.9003182     -3.1349555     -3.6319676     -0.6189704     -7.2023185 
 sample 41.2.9  sample 42.2.9 sample 43.2.10 sample 44.2.10 sample 45.2.11 
    -3.1395368     -3.4902695     -0.9672279     -4.5894317     -2.7392615 
sample 46.2.11 sample 47.2.12 sample 48.2.12  sample 49.3.1  sample 50.3.1 
    -7.8944370     -0.6030274     -1.9476656     -3.0441120     -4.0386646 
 sample 51.3.2  sample 52.3.2  sample 53.3.3  sample 54.3.3  sample 55.3.4 
    -3.0600707     -5.8311552     -2.6639647     -3.5301637     -3.2355195 
 sample 56.3.4  sample 57.3.5  sample 58.3.5  sample 59.3.6  sample 60.3.6 
    -5.7930376     -2.4877180     -3.9813863     -3.2985548     -4.4346065 
 sample 61.3.7  sample 62.3.7  sample 63.3.8  sample 64.3.8  sample 65.3.9 
    -2.6083152     -3.6839743     -3.5161706     -6.5316479     -2.8742787 
 sample 66.3.9 sample 67.3.10 sample 68.3.10 sample 69.3.11 sample 70.3.11 
    -6.3308764     -6.4660147     -6.6229519     -2.7837946     -4.3273749 
sample 71.3.12 sample 72.3.12  sample 73.4.1  sample 74.4.1  sample 75.4.2 
    -4.5927631     -7.3971721     -3.8155325     -6.4067759     -7.9075730 
 sample 76.4.2  sample 77.4.3  sample 78.4.3  sample 79.4.4  sample 80.4.4 
    -7.7737652     -4.8000143     -4.7126937     -0.8739717     -3.2225884 
 sample 81.4.5  sample 82.4.5  sample 83.4.6  sample 84.4.6  sample 85.4.7 
    -4.3947942     -7.4767733     -3.3019550     -4.6431241     -6.2088324 
 sample 86.4.7  sample 87.4.8  sample 88.4.8  sample 89.4.9  sample 90.4.9 
    -5.9608214     -5.4505305     -8.1807670     -4.7984066     -4.4786341 
sample 91.4.10 sample 92.4.10 sample 93.4.11 sample 94.4.11 sample 95.4.12 
    -3.1584737     -6.5965400     -3.9765626     -5.4874046     -7.3085003 
sample 96.4.12 
    -9.3295635 
> 
