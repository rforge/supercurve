
R version 2.7.2 (2008-08-25)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###
> ### TESTFIT.R
> ###
> 
> 
> options(warn=1)
> library(SuperCurve)
Loading required package: MASS
Loading required package: cobs
Loading required package: SparseM
Package SparseM (0.78) loaded.  To cite, see citation("SparseM")
Loading required package: quantreg
Loading required package: splines
> source("checkFuncs")
> 
> extdata.dir <- system.file("extdata", package="SuperCurve")
> 
> ## Get a valid RPPA object to get started
> path <- file.path(extdata.dir, "rppaTumorData")
> jnk <- RPPA("JNK.txt", path=path)
> 
> ## build the correct design
> dsn <- RPPADesign(jnk,
+                   grouping="blockSample",
+                   center=TRUE,
+                   controls=list("neg con", "pos con"))
> 
> ###########################
> ## tests of measure
> 
> checkException(RPPAFitParams(),
+                msg="missing argument")
Error in RPPAFitParams() : argument "measure" is missing, with no default
[1] TRUE
> 
> fp <- RPPAFitParams("bogus") # cannot catch until data.frame available
> checkException(RPPAFitFromParams(jnk, dsn, fp),
+                msg="invalid measurement value")
Error in RPPAFitFromParams(jnk, dsn, fp) : 
  supply the name of a valid measurement column to fit
[1] TRUE
> 
> fp <- RPPAFitParams(measure="Mean.Net")
> summary(fp)
       Length         Class          Mode 
            1 RPPAFitParams            S4 
> 
> ###########################
> ## tests of model and method
> 
> fp <- RPPAFitParams("Mean.Net", model="bogus") # cannot catch this yet
> summary(fp)
       Length         Class          Mode 
            1 RPPAFitParams            S4 
> checkException(RPPAFitFromParams(jnk, dsn, fp),  # but find bad argument here
+                msg="unregistered fit class as model should fail")
Error in value[[3]](cond) : 
  argument 'model' must be name of a registered fit class
[1] TRUE
> 
> checkException(RPPAFitParams("Mean.Net", method="bogus"),
+                msg="invalid method should fail")
Error in match.arg(method) : 
  'arg' should be one of "nls", "nlrob", "nlrq"
[1] TRUE
> 
> fp <- RPPAFitParams("Mean.Net", method="nlrob", model="bogus") # cannot catch this yet
> summary(fp)
       Length         Class          Mode 
            1 RPPAFitParams            S4 
> checkException(RPPAFitFromParams(jnk, dsn, fp),    # but find bad argument here
+                msg="unregistered fit class as model should fail")
Error in value[[3]](cond) : 
  argument 'model' must be name of a registered fit class
[1] TRUE
> 
> 
> fp <- RPPAFitParams("Mean.Net", model="logistic", method="nlrob")
> summary(fp)
       Length         Class          Mode 
            1 RPPAFitParams            S4 
> fit <- RPPAFitFromParams(jnk, dsn, fp)
Loading required package: robustbase
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
Warning in nlsmeth(Y ~ SuperCurve:::.slide.model(Steps + X), data = data.frame(Y = intensity,  :
  failed to converge in 20 steps
> 
> fp <- RPPAFitParams("Mean.Net", model="logistic", method="nls")
> summary(fp)
       Length         Class          Mode 
            1 RPPAFitParams            S4 
> fit <- RPPAFitFromParams(jnk, dsn, fp)
> 
> fp <- RPPAFitParams("Mean.Net", model="logistic", method="nlrq")
> summary(fp)
       Length         Class          Mode 
            1 RPPAFitParams            S4 
> fit <- RPPAFitFromParams(jnk, dsn, fp)
Warning in lsfit(x, y, d^2, int = FALSE) : 'X' matrix was collinear
Warning in lsfit(x, y, d^2, int = FALSE) : 'X' matrix was collinear
Warning in lsfit(x, y, d^2, int = FALSE) : 'X' matrix was collinear
Warning in lsfit(x, y, d^2, int = FALSE) : 'X' matrix was collinear
> 
> 
